#!/usr/bin/env ruby
#coding: utf-8

# Last updated at October, 06, 2014.

# Require gtk2 if available

begin
  require 'gtk2'
rescue LoadError
end

require 'socket'

class ClientQuitError < RuntimeError; end

port = ARGV.shift || 5001 # default is to use the iBoleto port (if 0 default to next available)
host = ARGV.shift # default is to bind everything

server = host ? TCPServer.open(host, port) : TCPServer.open(port)

port = server.addr[1]
addrs = server.addr[2..-1].uniq

puts "*** listening on #{addrs.collect{|a|"#{a}:#{port}"}.join(' ')}"

loop do
  socket = server.accept

  Thread.start do # one thread per client
    s = socket

    port = s.peeraddr[1]
    name = s.peeraddr[2]
    addr = s.peeraddr[3]

    puts "*** recieving from #{name}:#{port}"

    begin
      while line = s.gets # read a line at a time
        if m = line.match(/POST \/iBoleto\?cod=(\d+)+&dec=(\d+)/)
          cod = m[1]
          dec = m[2]

          boleto_regexp = /\A(\w{5})(\w{5})(\w{5})(\w{6})(\w{5})(\w{6})(\w{1})(\w{14})\Z/
          boleto = dec.dup.sub!(boleto_regexp, '\1 \2 \3 \4 \5 \6 \7 \8')
          boleto_with_tabs = dec.dup.sub!(boleto_regexp, "\\1\t\\2\t\\3\t\\4\t\\5\t\\6\t\\7\t\\8")

          conv_regexp = /\A(\d{12})(\d{12})(\d{12})(\d{12})\Z/
          conv = dec.dup.sub!(conv_regexp, '\1 \2 \3 \4')
          conv_with_tabs = dec.dup.sub!(conv_regexp, "\\1\t\\2\t\\3\t\\4")

          boleto_info = [cod, dec, boleto, boleto_with_tabs, conv, conv_with_tabs].compact.join("\n")

          puts
          puts "Boleto Information (in more than one format/spacing):"
          puts boleto_info
          puts

          if defined? Gtk
            clip = Gtk::Clipboard.get(Gdk::Selection::CLIPBOARD)
            clip.set_text(boleto_info)
            clip.store
          end
        end

        if ["\n\r", "\n", "\r\n"].include? line

          s.print "HTTP/1.1 200/OK\r\nContent-type:text/html\r\n\r\n"
          s.print "<html><head><title>ok</title></head><body>ok!</body></html>\r\n\r\n"
          puts "*** #{name}:#{port} disconnected"
          raise
        end


        raise ClientQuitError if line =~ /^die\r?$/
        puts "#{addr} [#{Time.now}]: #{line.inspect}"
      end

    rescue ClientQuitError
      puts "*** #{name}:#{port} disconnected"

    ensure
      s.close # close socket on error
    end

    puts "*** done with #{name}:#{port}"
  end

end


